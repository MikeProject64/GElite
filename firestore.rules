rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user ID in the document matches the authenticated user's ID
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Only the owner can read or write their own user document
      allow read, write: if isOwner(userId);
    }

    // Rules for the 'userSettings' collection
    match /userSettings/{userId} {
      // Only the owner can read or write their own settings document
      allow read, write: if isOwner(userId);
    }
    
    // Rules for the 'customers' collection
    match /customers/{customerId} {
      // Allow a user to read, update, or delete a customer document if they are the owner.
      allow read, update, delete: if isOwner(resource.data.userId);
      // Allow a user to create a customer document if they are setting themselves as the owner.
      allow create: if isOwner(request.resource.data.userId);
    }

    // Rules for the 'serviceOrders' collection
    match /serviceOrders/{orderId} {
      // Allow a user to read, update, or delete a service order if they are the owner.
      allow read, update, delete: if isOwner(resource.data.userId);
      // Allow a user to create a service order if they are setting themselves as the owner.
      allow create: if isOwner(request.resource.data.userId);
    }
    
    // Deny all other reads/writes by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
