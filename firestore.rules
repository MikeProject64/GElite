rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for common auth checks
    function isOwner(docData) {
      return request.auth.uid == docData.userId;
    }

    function isCreatingAsOwner() {
      return request.auth.uid == request.resource.data.userId;
    }
    
    // User settings are stored by UID, so only the owner can access them.
    match /userSettings/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    // The user collection itself - only allow users to read/write their own document.
    match /users/{userId} {
        allow get, update, delete: if request.auth.uid == userId;
        allow create: if request.auth.uid == userId;
        allow list: if false; // Disallow listing all users for security
    }

    match /customers/{customerId} {
      allow get, update, delete: if isOwner(resource.data);
      allow create: if isCreatingAsOwner();
      allow list: if request.auth.uid != null && request.query.filters.map(f => f[0]).hasAny(['userId']) && request.query.filters.filter(f => f[0] == 'userId')[0][2] == request.auth.uid;
    }

    match /serviceOrders/{orderId} {
      allow get, update, delete: if isOwner(resource.data);
      allow create: if isCreatingAsOwner();
      allow list: if request.auth.uid != null && request.query.filters.map(f => f[0]).hasAny(['userId']) && request.query.filters.filter(f => f[0] == 'userId')[0][2] == request.auth.uid;
    }

    match /inventory/{itemId} {
      allow get, update, delete: if isOwner(resource.data);
      allow create: if isCreatingAsOwner();
      allow list: if request.auth.uid != null && request.query.filters.map(f => f[0]).hasAny(['userId']) && request.query.filters.filter(f => f[0] == 'userId')[0][2] == request.auth.uid;
    }

    match /quotes/{quoteId} {
      allow get, update, delete: if isOwner(resource.data);
      allow create: if isCreatingAsOwner();
      allow list: if request.auth.uid != null && request.query.filters.map(f => f[0]).hasAny(['userId']) && request.query.filters.filter(f => f[0] == 'userId')[0][2] == request.auth.uid;
    }
  }
}