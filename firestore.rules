rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user roles and ownership.
    function isAdmin() {
      // An admin user has a document in the 'users' collection with the role 'admin'.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      // Checks if the requesting user's ID matches the provided userId.
      return request.auth.uid == userId;
    }
    
    // PUBLIC collections that anyone can read.
    match /siteConfig/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /plans/{planId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // USER METADATA collections.
    match /users/{userId} {
      // A user can create their own user document upon signup.
      allow create: if isOwner(userId);
      // A user can read or update their own data. Admins can read/update any user.
      allow read, update: if isOwner(userId) || isAdmin();
      // Only admins can list all users.
      allow list: if isAdmin();
    }

    match /userSettings/{userId} {
      // A user can read and write their own settings document.
      allow read, write: if isOwner(userId) || isAdmin();
      // Only admins can list user settings (not used in app, but for consistency).
      allow list: if isAdmin();
    }

    // USER-OWNED DATA collections.
    // This pattern applies to all collections where documents are owned by a user.
    function userOwnedResourceRules() {
      return {
        // Allow list queries by any authenticated user.
        // Security is enforced by the 'read' rule below.
        'allow list': if request.auth.uid != null,
        // Allow creation if the new document's userId matches the creator's ID.
        'allow create': if request.auth.uid == request.resource.data.userId,
        // Allow read, update, delete only if the user is the owner or an admin.
        'allow read, update, delete': if resource.data.userId == request.auth.uid || isAdmin()
      };
    }

    match /customers/{docId} {
      allow get, list, create, update, delete: if userOwnedResourceRules();
    }
    match /serviceOrders/{docId} {
      allow get, list, create, update, delete: if userOwnedResourceRules();
    }
    match /quotes/{docId} {
      allow get, list, create, update, delete: if userOwnedResourceRules();
    }
    match /collaborators/{docId} {
      allow get, list, create, update, delete: if userOwnedResourceRules();
    }
    match /timelineNotes/{docId} {
      allow get, list, create, update, delete: if userOwnedResourceRules();
    }
    match /inventory/{docId} {
      allow get, list, create, update, delete: if userOwnedResourceRules();
    }
    match /inventoryMovements/{docId} {
      allow get, list, create, update, delete: if userOwnedResourceRules();
    }
  }
}
