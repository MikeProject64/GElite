rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      // Safely check for admin role. Must check for existence before accessing data.
      return isAuth() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- Global & Public Config ---
    match /siteConfig/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /plans/{planId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // --- User Management & Settings ---
    match /users/{userId} {
      // Anyone can create their own user document upon signup.
      allow create: if isAuth() && request.auth.uid == userId;
      // Users can read their own document. Admins can read any user document.
      allow read: if isAuth() && (request.auth.uid == userId || isAdmin());
      // Users can update their own document. Admins can update any user document.
      allow update: if isAuth() && (request.auth.uid == userId || isAdmin());
      // Only admins can delete user documents.
      allow delete: if isAdmin();
    }

    match /userSettings/{userId} {
       // Users can manage their own settings. Admins can manage any user's settings.
      allow read, write: if isAuth() && (request.auth.uid == userId || isAdmin());
    }

    // --- Application Data Rules ---
    // These rules apply to collections where each document belongs to a specific user.
    match /(customers|serviceOrders|quotes|collaborators|inventory|inventoryMovements|timelineNotes)/{docId} {
      // Users can read, update, and delete their own documents. Admins can manage any document.
      allow read, update, delete: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      
      // Users can only create documents for themselves. Admins can create for anyone.
      allow create: if isAuth() && (request.resource.data.userId == request.auth.uid || isAdmin());
    }
  }
}
