rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAdmin() {
      // Safely checks if the requesting user has the 'admin' role.
      // Returns false if the user document doesn't exist yet.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      // Checks if the requesting user is the owner of the document ID.
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isResourceOwner() {
      // Checks if the requesting user is the owner of an existing document,
      // by looking at the 'userId' field inside the document's data.
      return request.auth != null && resource.data.userId == request.auth.uid;
    }

    function isCreatingForSelf() {
      // Checks if the user is creating a new document for themselves,
      // by looking at the 'userId' field in the incoming data.
      return request.auth != null && request.resource.data.userId == request.auth.uid;
    }


    // --- Global Configuration ---
    // Readable by anyone (for landing page, etc.), writable only by admins.
    match /siteConfig/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /plans/{planId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // --- User & Settings Management ---
    // Rules for the 'users' collection itself.
    match /users/{userId} {
      allow create: if isOwner(userId); // Allows a user to create their own document on signup.
      allow read, update, delete: if isOwner(userId) || isAdmin(); // Allows a user to manage their own doc, or an admin to manage any.
    }
    
    // Rules for user-specific settings (like appearance).
    match /userSettings/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }


    // --- Application Data Collections ---
    // Rules for data collections owned by a user.
    
    match /customers/{docId} {
      allow read, update, delete: if isResourceOwner() || isAdmin();
      allow create: if isCreatingForSelf() || isAdmin();
    }
    
    match /serviceOrders/{docId} {
      allow read, update, delete: if isResourceOwner() || isAdmin();
      allow create: if isCreatingForSelf() || isAdmin();
    }

    match /quotes/{docId} {
      allow read, update, delete: if isResourceOwner() || isAdmin();
      allow create: if isCreatingForSelf() || isAdmin();
    }
    
    match /collaborators/{docId} {
      allow read, update, delete: if isResourceOwner() || isAdmin();
      allow create: if isCreatingForSelf() || isAdmin();
    }

    match /inventory/{docId} {
      allow read, update, delete: if isResourceOwner() || isAdmin();
      allow create: if isCreatingForSelf() || isAdmin();
    }
    
    match /inventoryMovements/{docId} {
      allow read, update, delete: if isResourceOwner() || isAdmin();
      allow create: if isCreatingForSelf() || isAdmin();
    }

    match /timelineNotes/{docId} {
      allow read, update, delete: if isResourceOwner() || isAdmin();
      allow create: if isCreatingForSelf() || isAdmin();
    }
  }
}
