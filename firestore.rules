
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    match /users/{userId} {
      // Users can only access their own document
      allow read, write: if isOwner(userId);
    }

    match /userSettings/{userId} {
      // Users can only access their own settings document
      allow read, write: if isOwner(userId);
    }
    
    // Rules for collections owned by a user
    match /customers/{customerId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if request.auth != null; // Relies on client-side query for security
      allow write: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }
    
    match /serviceOrders/{orderId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if request.auth != null; // Relies on client-side query for security
      allow write: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }
    
    match /inventory/{itemId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if request.auth != null; // Relies on client-side query for security
      allow write: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }
    
    match /quotes/{quoteId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if request.auth != null; // Relies on client-side query for security
      allow write: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }
    
    match /collaborators/{collaboratorId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if request.auth != null; // Relies on client-side query for security
      allow write: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }
  }
}
