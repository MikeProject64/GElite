rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users can only read their own user document
    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create: if request.auth != null; // Allow user creation
    }

    // Site-wide configuration, readable by all, writable only by admins
    match /siteConfig/{docId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // User-specific settings, only accessible by the owner
    match /userSettings/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Quick notes, only accessible by the owner
    match /quickNotes/{noteId} {
      allow read, write, delete: if isOwner(request.resource.data.userId);
    }

    // Plans are public to read, but only admins can modify them
    match /plans/{planId} {
        allow read: if true;
        allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Custom Pages can be public or private
    match /customPages/{pageId} {
      allow read: if resource.data.isPublic == true || (request.auth != null && resource.data.userId == request.auth.uid);
      allow create, update, delete: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' || request.resource.data.userId == request.auth.uid);
    }

    // Core application data collections
    match /customers/{customerId} {
      allow read, write: if isOwner(request.resource.data.userId);
    }
    
    match /timelineNotes/{noteId} {
       allow read, create, update, delete: if isOwner(request.resource.data.userId);
    }

    match /serviceOrders/{orderId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId) || 
                      (request.auth != null && exists(/databases/$(database)/documents/quotes/$(request.resource.data.generatedFromQuoteId)) && get(/databases/$(database)/documents/quotes/$(request.resource.data.generatedFromQuoteId)).data.userId == request.auth.uid);
    }
    
    match /quotes/{quoteId} {
      allow read, create, update, delete: if isOwner(request.resource.data.userId);
    }

    match /collaborators/{collaboratorId} {
        allow read, create, update, delete: if isOwner(request.resource.data.userId);
    }
    
    match /inventory/{itemId} {
       allow read, create, update, delete: if isOwner(request.resource.data.userId);
    }
    
    match /inventoryMovements/{movementId} {
       allow read, create, update, delete: if isOwner(request.resource.data.userId);
    }
    
    match /serviceAgreements/{agreementId} {
       allow read, create, update, delete: if isOwner(request.resource.data.userId);
    }
  }
}
