rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Reusable function to check if the requesting user is the owner of a document.
    function isOwner(docUserId) {
      return request.auth != null && request.auth.uid == docUserId;
    }

    // Users can only read/write their own user document.
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Users can only read/write their own settings document.
    match /userSettings/{userId} {
      allow read, write: if isOwner(userId);
    }

    match /customers/{docId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow list: if request.auth != null;
    }
    
    match /serviceOrders/{docId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow list: if request.auth != null;
    }
    
    match /inventory/{docId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow list: if request.auth != null;
    }
    
    match /quotes/{docId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow list: if request.auth != null;
    }

    match /managers/{docId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow list: if request.auth != null;
    }
  }
}
