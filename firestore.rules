rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Check if user document exists and has the role 'admin'
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- Public & Admin Collections ---

    // Site-wide configuration, readable by all, writable only by admins.
    match /siteConfig/{docId} {
      allow read;
      allow write: if isAdmin();
    }
    
    // Plans are readable by all, writable only by admins.
    match /plans/{planId} {
      allow read;
      allow write: if isAdmin();
    }

    // --- User Management ---

    // User documents
    match /users/{userId} {
      // Anyone can create their own user document upon signup. This is critical.
      allow create: if isOwner(userId);
      
      // Users can read/update their own doc. Admins can read/update any.
      allow read, update: if isOwner(userId) || isAdmin();
      
      // Only Admins can list or delete users.
      allow list, delete: if isAdmin();
    }

    // User-specific appearance settings
    match /userSettings/{userId} {
        allow read, write: if isOwner(userId);
    }

    // --- Collections with user-owned documents ---
    // The security pattern here is:
    // 1. Allow a logged-in user to perform a list query (e.g., get all their customers).
    // 2. The client-side code MUST use a `where("userId", "==", user.uid)` clause in the query.
    // 3. The `allow read` rule then checks each document individually, ensuring only documents
    //    owned by the user are actually returned. This combination is secure.

    match /customers/{docId} {
      allow read, update, delete: if resource.data.userId == request.auth.uid || isAdmin();
      allow create: if request.resource.data.userId == request.auth.uid || isAdmin();
      allow list: if request.auth != null || isAdmin();
    }

    match /serviceOrders/{docId} {
       allow read, update, delete: if resource.data.userId == request.auth.uid || isAdmin();
       allow create: if request.resource.data.userId == request.auth.uid || isAdmin();
       allow list: if request.auth != null || isAdmin();
    }

    match /quotes/{docId} {
       allow read, update, delete: if resource.data.userId == request.auth.uid || isAdmin();
       allow create: if request.resource.data.userId == request.auth.uid || isAdmin();
       allow list: if request.auth != null || isAdmin();
    }

    match /collaborators/{docId} {
       allow read, update, delete: if resource.data.userId == request.auth.uid || isAdmin();
       allow create: if request.resource.data.userId == request.auth.uid || isAdmin();
       allow list: if request.auth != null || isAdmin();
    }

    match /inventory/{docId} {
       allow read, update, delete: if resource.data.userId == request.auth.uid || isAdmin();
       allow create: if request.resource.data.userId == request.auth.uid || isAdmin();
       allow list: if request.auth != null || isAdmin();
    }

    match /inventoryMovements/{docId} {
       allow read, delete: if resource.data.userId == request.auth.uid || isAdmin();
       allow create: if request.resource.data.userId == request.auth.uid || isAdmin();
       allow list: if request.auth != null || isAdmin();
    }

    match /timelineNotes/{docId} {
       allow read, delete: if resource.data.userId == request.auth.uid || isAdmin();
       allow create: if request.resource.data.userId == request.auth.uid || isAdmin();
       allow list: if request.auth != null || isAdmin();
    }
  }
}
