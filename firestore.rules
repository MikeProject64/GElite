
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =================================
    //  Helper Functions
    // =================================
    function userIsAuthenticated() {
      return request.auth != null;
    }
    
    function userIsAdmin() {
      // Check if the requesting user has an 'admin' role in their user document.
      // Use exists() to prevent errors if the user doc doesn't exist yet.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function userIsOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Checks the `userId` field within a document against the requesting user.
    function userOwnsDocument() {
      return request.auth.uid == resource.data.userId;
    }
    
    // Checks the `userId` field on a document being created.
    function userIsCreatingOwnDocument() {
      return request.auth.uid == request.resource.data.userId;
    }
    
    // =================================
    //  Collection Rules
    // =================================

    // --- Public / Semi-Public Collections ---
    match /siteConfig/{docId} {
      allow read: if true;
      allow write: if userIsAdmin();
    }
    
    match /plans/{docId} {
      allow read: if userIsAuthenticated();
      allow write: if userIsAdmin();
    }

    // --- User Management Collections ---
    match /users/{userId} {
      allow get: if userIsOwner(userId) || userIsAdmin();
      allow list: if userIsAdmin();
      allow update: if userIsOwner(userId) || userIsAdmin();
      // Allow a new user to create their own user document after signup.
      // Must set their own uid and role must be 'user'.
      allow create: if request.auth.uid == userId && request.resource.data.role == 'user';
    }
    
    match /userSettings/{userId} {
    	allow read, write: if userIsOwner(userId);
    }
    
    // --- User-Owned Data Collections ---
    // These collections require queries to be constrained by `where("userId", "==", request.auth.uid)`
    // for `list` operations to succeed for non-admin users.
    
    match /customers/{docId} {
      allow get, update, delete: if userOwnsDocument() || userIsAdmin();
      allow list: if userIsAuthenticated();
      allow create: if userIsCreatingOwnDocument();
    }
    
    match /serviceOrders/{docId} {
      allow get, update, delete: if userOwnsDocument() || userIsAdmin();
      allow list: if userIsAuthenticated();
      allow create: if userIsCreatingOwnDocument();
    }
    
    match /quotes/{docId} {
      allow get, update, delete: if userOwnsDocument() || userIsAdmin();
      allow list: if userIsAuthenticated();
      allow create: if userIsCreatingOwnDocument();
    }
    
    match /collaborators/{docId} {
      allow get, update, delete: if userOwnsDocument() || userIsAdmin();
      allow list: if userIsAuthenticated();
      allow create: if userIsCreatingOwnDocument();
    }
    
    match /inventory/{docId} {
      allow get, update, delete: if userOwnsDocument() || userIsAdmin();
      allow list: if userIsAuthenticated();
      allow create: if userIsCreatingOwnDocument();
    }
    
    match /inventoryMovements/{docId} {
      allow get, update, delete: if userOwnsDocument() || userIsAdmin();
      allow list: if userIsAuthenticated();
      allow create: if userIsCreatingOwnDocument();
    }
    
    match /timelineNotes/{docId} {
      allow get, update, delete: if userOwnsDocument() || userIsAdmin();
      allow list: if userIsAuthenticated();
      allow create: if userIsCreatingOwnDocument();
    }
  }
}
