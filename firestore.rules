rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // A user can create their own user document after the server-side
    // auth user has been created. The server action context is unauthenticated,
    // so this rule MUST NOT check for auth, but MUST validate the data.
    match /users/{userId} {
      allow create: if request.resource.data.uid == userId
                    && request.resource.data.role == 'user';
                    
      // Users can read/update their own doc. Admins can read/update/delete any.
      allow read, update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // All other data collections require the user to be the owner.
    // The userId field in the document must match the authenticated user's UID.
    function isResourceOwner() {
      return request.auth.uid == resource.data.userId;
    }
    
    function isCreatingOwnResource() {
      return request.auth.uid == request.resource.data.userId;
    }

    // Admins can manage site-wide configuration.
    match /siteConfig/{docId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }

    // Admins can manage plans. Public can read for pricing pages.
    match /plans/{planId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // Users can manage their own appearance settings.
    match /userSettings/{userId} {
        allow read, write: if isOwner(userId);
    }
    
    match /customers/{customerId} {
      allow read, update, delete: if isAuth() && isResourceOwner();
      allow create: if isAuth() && isCreatingOwnResource();
    }
    
    match /collaborators/{collaboratorId} {
      allow read, update, delete: if isAuth() && isResourceOwner();
      allow create: if isAuth() && isCreatingOwnResource();
    }
    
    match /serviceOrders/{orderId} {
      allow read, update, delete: if isAuth() && isResourceOwner();
      allow create: if isAuth() && isCreatingOwnResource();
    }
    
    match /quotes/{quoteId} {
      allow read, update, delete: if isAuth() && isResourceOwner();
      allow create: if isAuth() && isCreatingOwnResource();
    }

    match /inventory/{itemId} {
      allow read, update, delete: if isAuth() && isResourceOwner();
      allow create: if isAuth() && isCreatingOwnResource();
    }
    
    match /inventoryMovements/{movementId} {
      allow read, update, delete: if isAuth() && isResourceOwner();
      allow create: if isAuth() && isCreatingOwnResource();
    }

    match /timelineNotes/{noteId} {
        allow read, update, delete: if isAuth() && isResourceOwner();
        allow create: if isAuth() && isCreatingOwnResource();
    }
  }
}
