rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an admin.
    function isAdmin() {
      // Check if the user is authenticated and if their role in the 'users' collection is 'admin'.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for user documents
    match /users/{userId} {
      // Admins can read any user's data. Users can only read/write their own.
      allow read: if isAdmin() || request.auth.uid == userId;
      // Users can only write to their own document, admins can also update roles etc.
      allow write: if isAdmin() || request.auth.uid == userId;
    }

    // Rules for user-specific settings (like color theme)
    match /userSettings/{userId} {
      // Only the owner can read/write their personal settings.
      allow read, write: if request.auth.uid == userId;
    }

    // Rules for global site configuration
    match /siteConfig/{docId} {
      // Anyone can read the site configuration (for site name, icon, etc.).
      allow get: if true;
      // Only admins can write to the site configuration.
      allow list, write: if isAdmin();
    }

    // Rules for subscription plans
    match /plans/{planId} {
      // Plans are public for the pricing page.
      allow get, list: if true;
      // Only admins can create or modify plans.
      allow write: if isAdmin();
    }

    // Rules for Custom Pages
    match /customPages/{pageId} {
      // Admins have full read/write access to all pages.
      // Anyone can read a public page (this covers the public-facing page route).
      // Authenticated users can read their own private pages.
      allow read: if isAdmin() || resource.data.isPublic == true || (request.auth.uid != null && request.auth.uid == resource.data.userId);

      // Admins can write to any page.
      // Authenticated users can only write to their own pages.
      allow write: if isAdmin() || (request.auth.uid != null && request.auth.uid == resource.data.userId);
    }

    // Default rules for user-scoped data collections
    // This single rule covers customers, serviceOrders, quotes, collaborators, inventory, etc.
    match /{collection}/{docId} 
      where collection in ['customers', 'serviceOrders', 'quotes', 'collaborators', 'inventory', 'inventoryMovements', 'timelineNotes'] {
        // A user can do anything with a document in these collections if their UID matches the document's userId field.
        allow read, write, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}
