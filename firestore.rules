
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Site-wide configuration, readable by anyone, writable only by admins.
    match /siteConfig/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Public plans, readable by anyone, writable only by admins.
    match /plans/{planId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // User profiles and roles
    match /users/{userId} {
      // Admins can manage any user profile
      allow read, write: if isAdmin();
      
      // A user can read their own profile
      allow read: if isOwner(userId);
      
      // A user can update their own profile (e.g., to add stripeCustomerId)
      allow update: if isOwner(userId);
      
      // Any authenticated user can create their own user document during signup
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // User-specific settings, only accessible by the owner or an admin
    match /userSettings/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }

    // Generic rules for user-owned data collections
    // This rule applies to any collection listed in the `where` clause.
    // It ensures that users can only access their own data, while admins have full access.
    match /{collection}/{docId} 
      where collection in ['customers', 'serviceOrders', 'quotes', 'collaborators', 'inventory', 'inventoryMovements', 'timelineNotes'] {
      
      // Admins can do anything
      allow read, write: if isAdmin();

      // Users can create their own documents.
      // We check the `userId` field in the new document being created.
      allow create: if request.auth.uid == request.resource.data.userId;

      // Users can read, update, and delete their own existing documents.
      // We check the `userId` field in the existing document.
      allow read, update, delete: if request.auth.uid == resource.data.userId;
    }
  }
}
